// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/matrix/matrix_event_entity.dart';
import 'models/matrix/matrix_room_entity.dart';
import 'models/matrix/matrix_session_entity.dart';
import 'models/matrix/matrix_user_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6877290785149141106),
      name: 'MatrixSessionData',
      lastPropertyId: const obx_int.IdUid(10, 7574971546910124824),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8965277528179040339),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5606197167034900527),
            name: 'userId',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(4, 6263200210856289954)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2459883155040190725),
            name: 'homeserver',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4411120149269076577),
            name: 'deviceId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8234539157285855676),
            name: 'deviceName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8928220240955564565),
            name: 'clientName',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(6, 5177288908404124110)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 7574971546910124824),
            name: 'lastUpdate',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 8961677099846179029),
      name: 'MatrixEventEntity',
      lastPropertyId: const obx_int.IdUid(8, 7410140208520578391),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7090622641611171294),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7516130442823733955),
            name: 'eventId',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(1, 8280708112250155475)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8676661710862388967),
            name: 'roomId',
            type: 9,
            flags: 2048,
            indexId: const obx_int.IdUid(2, 4563974284146249665)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4787978601234138510),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3832145259422157757),
            name: 'senderId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8714077916984075492),
            name: 'content',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5379474826811046541),
            name: 'originServerTs',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 7410140208520578391),
            name: 'isLocal',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 2706354259282930452),
      name: 'MatrixRoomEntity',
      lastPropertyId: const obx_int.IdUid(7, 8450673024393733294),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3292414558675659912),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4656802297497560418),
            name: 'roomId',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(3, 6277558435260476742)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1627916879468116391),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6351503602734542732),
            name: 'avatarUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8042856461942828613),
            name: 'isDirect',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 407289029936818614),
            name: 'lastMessageTimestamp',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8450673024393733294),
            name: 'unreadCount',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 3737247898925823182),
      name: 'MatrixUserEntity',
      lastPropertyId: const obx_int.IdUid(5, 4145223775482125996),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3737302500951606984),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8745773765861120813),
            name: 'userId',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(5, 2365911502172388301)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 647174547525191238),
            name: 'displayName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7085052383562436737),
            name: 'avatarUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4145223775482125996),
            name: 'isOnline',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(6, 3737247898925823182),
      lastIndexId: const obx_int.IdUid(6, 5177288908404124110),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [8163850506880497412, 5078406833206166750],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        2875865182795856635,
        7765450668949649971,
        6726164487772431367,
        4307317420215163128,
        1418559600346702199,
        6910129869717448178,
        8780939241126882462,
        4481824049804981215,
        5248466387769387821,
        9050524095772775444,
        4909169974243688680,
        1459653684857930878
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    MatrixSessionData: obx_int.EntityDefinition<MatrixSessionData>(
        model: _entities[0],
        toOneRelations: (MatrixSessionData object) => [],
        toManyRelations: (MatrixSessionData object) => {},
        getId: (MatrixSessionData object) => object.id,
        setId: (MatrixSessionData object, int id) {
          object.id = id;
        },
        objectToFB: (MatrixSessionData object, fb.Builder fbb) {
          final userIdOffset = fbb.writeString(object.userId);
          final homeserverOffset = fbb.writeString(object.homeserver);
          final deviceIdOffset = fbb.writeString(object.deviceId);
          final deviceNameOffset = fbb.writeString(object.deviceName);
          final clientNameOffset = fbb.writeString(object.clientName);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(4, userIdOffset);
          fbb.addOffset(5, homeserverOffset);
          fbb.addOffset(6, deviceIdOffset);
          fbb.addOffset(7, deviceNameOffset);
          fbb.addOffset(8, clientNameOffset);
          fbb.addInt64(9, object.lastUpdate);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final clientNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final homeserverParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final deviceIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final deviceNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final lastUpdateParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final object = MatrixSessionData(
              userId: userIdParam,
              clientName: clientNameParam,
              homeserver: homeserverParam,
              deviceId: deviceIdParam,
              deviceName: deviceNameParam,
              lastUpdate: lastUpdateParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    MatrixEventEntity: obx_int.EntityDefinition<MatrixEventEntity>(
        model: _entities[1],
        toOneRelations: (MatrixEventEntity object) => [],
        toManyRelations: (MatrixEventEntity object) => {},
        getId: (MatrixEventEntity object) => object.id,
        setId: (MatrixEventEntity object, int id) {
          object.id = id;
        },
        objectToFB: (MatrixEventEntity object, fb.Builder fbb) {
          final eventIdOffset = fbb.writeString(object.eventId);
          final roomIdOffset = fbb.writeString(object.roomId);
          final typeOffset = fbb.writeString(object.type);
          final senderIdOffset = fbb.writeString(object.senderId);
          final contentOffset = fbb.writeString(object.content);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, eventIdOffset);
          fbb.addOffset(2, roomIdOffset);
          fbb.addOffset(3, typeOffset);
          fbb.addOffset(4, senderIdOffset);
          fbb.addOffset(5, contentOffset);
          fbb.addInt64(6, object.originServerTs);
          fbb.addBool(7, object.isLocal);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final eventIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final roomIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final senderIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final originServerTsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final isLocalParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final object = MatrixEventEntity(
              eventId: eventIdParam,
              roomId: roomIdParam,
              senderId: senderIdParam,
              type: typeParam,
              content: contentParam,
              originServerTs: originServerTsParam,
              isLocal: isLocalParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    MatrixRoomEntity: obx_int.EntityDefinition<MatrixRoomEntity>(
        model: _entities[2],
        toOneRelations: (MatrixRoomEntity object) => [],
        toManyRelations: (MatrixRoomEntity object) => {},
        getId: (MatrixRoomEntity object) => object.id,
        setId: (MatrixRoomEntity object, int id) {
          object.id = id;
        },
        objectToFB: (MatrixRoomEntity object, fb.Builder fbb) {
          final roomIdOffset = fbb.writeString(object.roomId);
          final nameOffset = fbb.writeString(object.name);
          final avatarUrlOffset = fbb.writeString(object.avatarUrl);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, roomIdOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, avatarUrlOffset);
          fbb.addBool(4, object.isDirect);
          fbb.addInt64(5, object.lastMessageTimestamp);
          fbb.addInt64(6, object.unreadCount);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final roomIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final avatarUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final isDirectParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final lastMessageTimestampParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final unreadCountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final object = MatrixRoomEntity(
              roomId: roomIdParam,
              name: nameParam,
              avatarUrl: avatarUrlParam,
              isDirect: isDirectParam,
              lastMessageTimestamp: lastMessageTimestampParam,
              unreadCount: unreadCountParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    MatrixUserEntity: obx_int.EntityDefinition<MatrixUserEntity>(
        model: _entities[3],
        toOneRelations: (MatrixUserEntity object) => [],
        toManyRelations: (MatrixUserEntity object) => {},
        getId: (MatrixUserEntity object) => object.id,
        setId: (MatrixUserEntity object, int id) {
          object.id = id;
        },
        objectToFB: (MatrixUserEntity object, fb.Builder fbb) {
          final userIdOffset = fbb.writeString(object.userId);
          final displayNameOffset = fbb.writeString(object.displayName);
          final avatarUrlOffset = fbb.writeString(object.avatarUrl);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addOffset(2, displayNameOffset);
          fbb.addOffset(3, avatarUrlOffset);
          fbb.addBool(4, object.isOnline);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final displayNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final avatarUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final isOnlineParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final object = MatrixUserEntity(
              userId: userIdParam,
              displayName: displayNameParam,
              avatarUrl: avatarUrlParam,
              isOnline: isOnlineParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [MatrixSessionData] entity fields to define ObjectBox queries.
class MatrixSessionData_ {
  /// See [MatrixSessionData.id].
  static final id =
      obx.QueryIntegerProperty<MatrixSessionData>(_entities[0].properties[0]);

  /// See [MatrixSessionData.userId].
  static final userId =
      obx.QueryStringProperty<MatrixSessionData>(_entities[0].properties[1]);

  /// See [MatrixSessionData.homeserver].
  static final homeserver =
      obx.QueryStringProperty<MatrixSessionData>(_entities[0].properties[2]);

  /// See [MatrixSessionData.deviceId].
  static final deviceId =
      obx.QueryStringProperty<MatrixSessionData>(_entities[0].properties[3]);

  /// See [MatrixSessionData.deviceName].
  static final deviceName =
      obx.QueryStringProperty<MatrixSessionData>(_entities[0].properties[4]);

  /// See [MatrixSessionData.clientName].
  static final clientName =
      obx.QueryStringProperty<MatrixSessionData>(_entities[0].properties[5]);

  /// See [MatrixSessionData.lastUpdate].
  static final lastUpdate =
      obx.QueryIntegerProperty<MatrixSessionData>(_entities[0].properties[6]);
}

/// [MatrixEventEntity] entity fields to define ObjectBox queries.
class MatrixEventEntity_ {
  /// See [MatrixEventEntity.id].
  static final id =
      obx.QueryIntegerProperty<MatrixEventEntity>(_entities[1].properties[0]);

  /// See [MatrixEventEntity.eventId].
  static final eventId =
      obx.QueryStringProperty<MatrixEventEntity>(_entities[1].properties[1]);

  /// See [MatrixEventEntity.roomId].
  static final roomId =
      obx.QueryStringProperty<MatrixEventEntity>(_entities[1].properties[2]);

  /// See [MatrixEventEntity.type].
  static final type =
      obx.QueryStringProperty<MatrixEventEntity>(_entities[1].properties[3]);

  /// See [MatrixEventEntity.senderId].
  static final senderId =
      obx.QueryStringProperty<MatrixEventEntity>(_entities[1].properties[4]);

  /// See [MatrixEventEntity.content].
  static final content =
      obx.QueryStringProperty<MatrixEventEntity>(_entities[1].properties[5]);

  /// See [MatrixEventEntity.originServerTs].
  static final originServerTs =
      obx.QueryIntegerProperty<MatrixEventEntity>(_entities[1].properties[6]);

  /// See [MatrixEventEntity.isLocal].
  static final isLocal =
      obx.QueryBooleanProperty<MatrixEventEntity>(_entities[1].properties[7]);
}

/// [MatrixRoomEntity] entity fields to define ObjectBox queries.
class MatrixRoomEntity_ {
  /// See [MatrixRoomEntity.id].
  static final id =
      obx.QueryIntegerProperty<MatrixRoomEntity>(_entities[2].properties[0]);

  /// See [MatrixRoomEntity.roomId].
  static final roomId =
      obx.QueryStringProperty<MatrixRoomEntity>(_entities[2].properties[1]);

  /// See [MatrixRoomEntity.name].
  static final name =
      obx.QueryStringProperty<MatrixRoomEntity>(_entities[2].properties[2]);

  /// See [MatrixRoomEntity.avatarUrl].
  static final avatarUrl =
      obx.QueryStringProperty<MatrixRoomEntity>(_entities[2].properties[3]);

  /// See [MatrixRoomEntity.isDirect].
  static final isDirect =
      obx.QueryBooleanProperty<MatrixRoomEntity>(_entities[2].properties[4]);

  /// See [MatrixRoomEntity.lastMessageTimestamp].
  static final lastMessageTimestamp =
      obx.QueryIntegerProperty<MatrixRoomEntity>(_entities[2].properties[5]);

  /// See [MatrixRoomEntity.unreadCount].
  static final unreadCount =
      obx.QueryIntegerProperty<MatrixRoomEntity>(_entities[2].properties[6]);
}

/// [MatrixUserEntity] entity fields to define ObjectBox queries.
class MatrixUserEntity_ {
  /// See [MatrixUserEntity.id].
  static final id =
      obx.QueryIntegerProperty<MatrixUserEntity>(_entities[3].properties[0]);

  /// See [MatrixUserEntity.userId].
  static final userId =
      obx.QueryStringProperty<MatrixUserEntity>(_entities[3].properties[1]);

  /// See [MatrixUserEntity.displayName].
  static final displayName =
      obx.QueryStringProperty<MatrixUserEntity>(_entities[3].properties[2]);

  /// See [MatrixUserEntity.avatarUrl].
  static final avatarUrl =
      obx.QueryStringProperty<MatrixUserEntity>(_entities[3].properties[3]);

  /// See [MatrixUserEntity.isOnline].
  static final isOnline =
      obx.QueryBooleanProperty<MatrixUserEntity>(_entities[3].properties[4]);
}
